shared_dc
res_col0[shared_dc,]
# Let's compare the genes in their importance in colonizing Col-0
res_col0<- results(dds, name = "plant_col_0_vs_ctrl")
# 417 genes important
shared<-as.data.frame(res_col0[shared_dc,])
shared$shared <- c(rep("Shared", dim(shared)[1]))
unique<-res_col0[uniq_dc,]
unique
rownames(res_col0)
rownames(res_col0)[shared_dc]
rownames(res_col0)
rownames(res_col0)%in%shared_dc
table(rownames(res_col0)%in%shared_dc)
shared_dc %in% rownames(res_col0)
table(shared_dc %in% rownames(res_col0))
uniq_dc
shared_dc %in% rownames(res_col0)
which(shared_dc %in% rownames(res_col0))
dim(shared_dc)
shared_dc
uniq_dc <- which(uniq_dc %in% rownames(res_col0))
# Let's compare the genes in their importance in colonizing Col-0
res_col0<- results(dds, name = "plant_col_0_vs_ctrl")
# 417 genes important
shared<-as.data.frame(res_col0[shared_dc,])
res_col0[shared_dc,]
rownames(res_col0)
rownames(res_col0)%in%shared_dc
shared_dc%in%rownames(res_col0)
##################
# Now let's do a comparison with orthologs that are unique to DC3000
uniq_dc <- ortho[sapply(ortho[,5], function(x) all( x == '' )),1]
shared_dc <- ortho[sapply(ortho[,5], function(x) all( x != '' )),1]
shared_dc <- shared_dc[which(shared_dc %in% rownames(res_col0))]
uniq_dc <- uniq_dc[which(uniq_dc %in% rownames(res_col0))]
# Let's compare the genes in their importance in colonizing Col-0
res_col0<- results(dds, name = "plant_col_0_vs_ctrl")
# 417 genes important
shared<-as.data.frame(res_col0[shared_dc,])
shared$shared <- c(rep("Shared", dim(shared)[1]))
unique<-res_col0[uniq_dc,]
unique$shared <- "Unique"
All <- rbind(shared,Unique)
All <- rbind(shared,unique)
unique
dim(unique)
# 417 genes important
shared<-res_col0[shared_dc,]
shared$shared <- c(rep("Shared", dim(shared)[1]))
unique<-res_col0[uniq_dc,]
unique$shared <- "Unique"
All <- rbind(shared,unique)
All
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.2)
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.2) +
theme_bw()
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.2) +
theme_bw() + scale_color_brewer(palette = "PuOr")
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.2) +
theme_bw() + scale_color_discrete(palette = "PuOr")
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.2) +
theme_bw() + scale_color_brewer(palette = "PuOr")
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.2) +
theme_bw() + scale_color_brewer(palette = "Paired")
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.8) +
theme_bw() + scale_color_brewer(palette = "Paired")
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.8) +
theme_bw() + scale_color_fill(palette = "Paired")
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.8) +
theme_bw() + scale_color_viridis_d()
dev.off()
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.8) +
theme_bw() + scale_color_viridis_d()
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.8) +
theme_bw() + scale_color_viridis_c()
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.8) +
theme_bw() + scale_fill_viridis_d()
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.2) +
theme_bw() + scale_fill_viridis_d()
#Now let's plot shared vs unique
ggplot(All, aes(log2FoldChange, fill = shared)) + geom_density(alpha = 0.4) +
theme_bw() + scale_fill_viridis_d()
# What the hell is going on with that second peak in the unique?
unique_pos <- All %>% filter(shared=="Unique") %>% filter("log2FoldChange">0.75)
library(diplyr)
library(dplyr)
# What the hell is going on with that second peak in the unique?
unique_pos <- All %>% filter(shared=="Unique") %>% filter("log2FoldChange">0.75)
class(All)
All
colnames(All)
# What the hell is going on with that second peak in the unique?
unique_pos <- data.frame(All) %>% filter(shared=="Unique") %>% filter("log2FoldChange">0.75)
unique_pos
dim(unique_pos)
hist(unique_pos$log2FoldChange)
hist(unique_pos$log2FoldChange, breaks=10)
unique_pos <- unique_pos %>% filter("log2FoldChange">0.75)
head(unique_pos)
plot(unique_pos$baseMean, unique_pos$log2FoldChange)
plot(log(unique_pos$baseMean), unique_pos$log2FoldChange)
unique_pos$log2FoldChange
class(unique_pos$log2FoldChange)
class(unique_pos$log2FoldChange)>0.75
(unique_pos$log2FoldChange)>0.75
table(unique_pos$log2FoldChange)>0.75)
table(unique_pos$log2FoldChange>0.75)
unique_pos <- unique_pos %>% filter(log2FoldChange>0.75)
unique_[ps]
unique_pos
head(unique_pos, print n=200)
head(unique_pos, n=200)
head(unique_pos, n=400)
head(unique_pos, n=500)
head(unique_pos, n=600)
head(unique_pos, n=700)
tail(unique_pos, n=700)
dim(unique_pos)
unique_pos$log2FoldChange
table(unique_pos$log2FoldChange)
table(unique_pos$log2FoldChange) >1
which(table(unique_pos$log2FoldChange) >1)
uniq_pos[which(table(unique_pos$log2FoldChange) >1),]
unique_pos[which(table(unique_pos$log2FoldChange) >1),]
table(unique_pos$log2FoldChange)[which(table(unique_pos$log2FoldChange) >1),]
table(unique_pos$log2FoldChange)[which(table(unique_pos$log2FoldChange) >1)]
table(unique_pos$log2FoldChange)
table(unique_pos$log2FoldChange)[which(table(unique_pos$log2FoldChange) >1)]
all_exp
all_exp[,1]
unique_pos
shared
uniq_dc
table(uniq_dc)
table(uniq_dc)>1
which(table(uniq_dc)>1)
which(table(shared_dc)>1)
ortho
which(ortho[,1]=="WP_003409202.1")
ortho[which(ortho[,1]=="WP_003409202.1"),]
ortho[which(ortho[,1]=="WP_003409202.1"),][,2]
table(ortho[which(ortho[,1]=="WP_003409202.1"),][,2])
ortho
ortho[which(ortho[,1]=="WP_003409202.1"),]
ortho[which(ortho[,1]=="WP_003409202.1"),][,2]
table(ortho[which(ortho[,1]=="WP_003409202.1"),][,2])
table(ortho[which(ortho[,1]=="WP_003409202.1"),][,2])
table(ortho[which(ortho[,1]=="WP_003409202.1"),][,3])
table(ortho[which(ortho[,1]=="WP_003409202.1"),][,4])
table(ortho[which(ortho[,1]=="WP_003409202.1"),][,5])
head(ortho)
table(ortho[which(ortho[,1]=="WP_003409202.1"),][,4])
table(ortho[which(ortho[,1]=="WP_003409202.1"),][,3])
head(ortho)
table(ortho[which(ortho[,1]=="WP_003409202.1"),][,4])
ortho[which(ortho[,1]=="WP_003409202.1"),]
head(ortho[which(ortho[,1]=="WP_003409202.1"),])
(ortho[which(ortho[,1]=="WP_003409202.1"),])[,3]
table((ortho[which(ortho[,1]=="WP_003409202.1"),])[,3])
table((ortho[which(ortho[,1]=="WP_003409202.1"),])[,4])
table((ortho[which(ortho[,1]=="WP_003409202.1"),])[,5])
table((ortho[which(ortho[,1]=="WP_003409202.1"),])[,2])
table((ortho[which(ortho[,1]=="WP_003409202.1"),])[,3])
head(ortho[which(ortho[,1]=="WP_003409202.1"),])
# This script reads in the rds experiments for the four experiments Done by Effie in 12/2022 and 3/2023 with Rb-Tnseq
setwd("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/")
All
#read in the metacsv with all the experiments
all_exp <- read.csv("/Users/talia/Library/CloudStorage/GoogleDrive-tkarasov@gmail.com/My Drive/Utah_Professorship/projects/Tnseq/compiled_trials_3_2024/data//full_experiments/all_p25_dc_axenic_6_2024.csv", header = TRUE)
head(all_exp)
rownames(all_exp)
colnames(all_exp)
tail(colnames(all_exp))
colnames(all_exp)
length(colnames(all_exp))
# Let's write the count_table and sample_order to file
sample_count <- c(sample_order_filter, count_table_filter)
write_rds(sample_count, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_count_table_6_12_2024.rds")
#read in the metacsv with all the experiments
load("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_count_table_6_12_2024.rds")
#read in the metacsv with all the experiments
sample_count  <- readRDS("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_count_table_6_12_2024.rds")
sample_order_filter <- sample_count[1]
count_table_filter <- samp_count[2]
count_table_filter <- sample_count[2]
# Talia's tailocin tnseq results
tb_p25 <- read.table("./all_genes_table_tailocin_6_11_2024.csv", sep=",")
# Talia's tailocin tnseq results
tb_p25 <- read.csv("./all_genes_table_tailocin_6_11_2024.csv", sep=",")
sample_order_filter
head(sample_count)
# We need to just consider the p25.c2 data
count_keep <- count_table_filter %>% filter(treatment == "p25c2")
class(count_table_filter)
str(count_table_filter)
count_table_filter <- data.frame(sample_count[2])
colnames(count_table_filter)
sample_order_filter
dim(sample_order_filter)
sample_count
str(sample_count)
hm <- data.frame(sample_count)
all_orth <- all_exp[, colSums(is.na(all_exp[1:7321])) == 0]
count_table_p <- t(all_orth[,9:dim(all_orth)[2]])
sample_order_p <- (all_orth[,1:8])
sample_order_p <- sample_order_p %>% mutate(plant = tolower(plant))
# Let's filter out all samples that have fewer than 25,000 reads
high_enough <- which(colSums(count_table_p)>=25000)
count_table_filter <-count_table_p[,high_enough]
sample_order_filter <- sample_order_p[high_enough,]
class(sample_order_filter)
colnames(sample_order_filter)
colnames(count_table_filter)
class(count_table_filter)
hea(count_table_filter)
head(count_table_filter)
head(count_table_filter)[1:10]
head(count_table_filter)[1:5,]
dim(count_table_filter)
dim(sample_order_filter)
write_rds(sample_order_filter, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_sample_order_filter_6_12_2024.rds")
#read in the metacsv with all the experiments
sample_order_filter  <- readRDS("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_sample_order_filter_6_12_2024.rds")
# Let's write the count_table and sample_order to file
write_rds(sample_order_filter, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_sample_order_filter_6_12_2024.rds")
write_rds(count_table_filter, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_count_table_filter_6_12_2024.rds")
count_table_filter <- readRDS("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_count_table_filter_6_12_2024.rds")
count_table_filter <- readRDS("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_count_table_filter_6_12_2024.rds")
colnames(count_table_filter)
# We need to just consider the p25.c2 data
indeces_p25c2 <- which(sample_order_filter$treatment == "p25_c2")
indeces_p25c2
sample_order_filter$treatment
# We need to just consider the p25.c2 data
indeces_p25c2 <- which(sample_order_filter$treatment == "p25c2")
indeces_p25c2
sample_p25 <- sample_order_filter[indeces_p25c2,]
dim(count_table_filter)
count_p25 <- count_table_filter[,indeces_p25c2]
#########
# This blog was helpful for getting me to understand the interactions: https://www.biostars.org/p/353618/#356111
#now with the filtered dataset, make deseq object
dds <- DESeqDataSetFromMatrix(countData = count_p25,
colData = sample_p25, design = ~ plant +
experiment +  plant)
dds$plant <- factor(dds$plant, levels = c("ctrl","col_0", "ey15_2"))
dds$treatment
#Let's do some basic visualization
ntd <- normTransform(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:100]
#perform the median of ratios method of normalization
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="plant_ey15_2_vs_ctrl" )
res
res$padj
res$padj<0.01
table(res$padj<0.01)
res
head(res)
res_eyach <- res[,c("baseMean", "log2FoldChange", "pvalue", "padj" )]
#Now we want to convert Talia B's tnseq result file to the general ortholog mappings
ortho <- read.table("/Users/talia/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/orthologues_dc3000_p25_c2_7_2022.txt", header = T)
#Now we want to convert Talia B's tnseq result file to the general ortholog mappings
ortho <- read.table("/Users/talia/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/orthologues_dc3000_p25_c2_7_2022.txt", header = T, sep= "\t")
head(ortho)
head(tb_p25)
counts_table = p25_22_counts
head(ortho)
#Now we want to convert Talia B's tnseq result file to the general ortholog mappings
ortho <- read.table("/Users/talia/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/orthologues_dc3000_p25_c2_7_2022.txt", header = T, sep= "\t")
counts_table = p25_22_counts
ortho_dict <- ortho[,3]
names(ortho_dict) <- ortho[,1]
reverse_dict <- names(ortho_dict)
names(reverse_dict) <- ortho_dict
reverse_dict
ortho_dict
reverse_dict
names(reverse_dict)
class(reverse_dict)
names(reverse_dict)
tail)names(reverse_dict))
tail(names(reverse_dict))
ortho
dim(ortho)
bt_p25
tb_p25
rownames(tb_p25)
head(tb_p25)
#in the meantime we will just look at ones that have ortholog in DC3000
BJ_val <- tb_p25$ID
reverse_cit[BJ_val]
reverse_dict[BJ_val]
conversion <- reverse_dict[BJ_val]
tb_p25$DC_ID <_ conversion
tb_p25$DC_ID <- conversion
tb_p25$DC_ID
res_eyach
colnames(res_eyach)
tb_converted <- tb_p25 %>% filter(conversion!="NA")
head(tb_converted)
rownames(tb_converted) <- tb_converted$DC_ID
tb_converted
rownames(tb_converted)
which(tb_converted$DC_ID==‘WP_002553156.1’)
which(tb_converted$DC_ID=="WP_002553156.1")
tb_converted(which(tb_converted$DC_ID=="WP_002553156.1"))
tb_converted[which(tb_converted$DC_ID=="WP_002553156.1"),]
head(res_eyach)
colnames(res_eyach) <- c("baseMean_Ey", "log2FoldChange_Ey", "pvalue_Ey", "padj_Ey" )
#Now let's merge this fitness file with the res_eyach file
res_eyach$DC_ID <- rownames(res_eyach)
eyach_tailocin <- full_join(tb_p25, res_eyach, by = DC_ID)
head(res_eyach)
res_eyach <- data.frame(res_eyach)
eyach_tailocin <- full_join(tb_p25, res_eyach, by = DC_ID)
res_eyach$DC_ID <- rownames(res_eyach)
eyach_tailocin <- full_join(tb_p25, res_eyach, by = DC_ID)
tb_p25$DC_ID
res_eyach$DC_ID
dim(res_eyach)
dim(tb_converted)
head(res_eyach)
table(res_eyach)
table(res_eyach$DC_ID)>1
which(table(res_eyach$DC_ID)>1)
(table(res_eyach$DC_ID)>1)
table(table(res_eyach$DC_ID)>1)
rownames(res_eyach)
res_eyach[tb_converted$DC_ID]
res_eyach[tb_converted$DC_ID,]
dim(res_eyach[tb_converted$DC_ID,])
head(res_eyach[tb_converted$DC_ID,])
eyach_tailocin <- cbind(res_eyach[tb_converted$DC_ID,], tb_converted)
head(eyach_tailocin)
plot(eyach_tailocin$log2FoldChange_Ey, eyach_tailocin$logFC)
head(tb_p25)
tb_p25 <- tb_p25[, c("ID", "logFC", "AveExpr", "t", "P.Value", "adj.P.Val")]
# This script reads in the rds experiments for the four experiments Done by Effie in 12/2022 and 3/2023 with Rb-Tnseq
setwd("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/")
# Talia's tailocin tnseq results
tb_p25 <- read.csv("./all_genes_table_tailocin_6_11_2024.csv", sep=",")
tb_p25 <- tb_p25[, c("ID", "logFC", "AveExpr", "t", "P.Value", "adj.P.Val")]
colnames(tb_p25) <- c("ID", "logFC_tailocin", "AveExpr_tailocin", "t_tailocin", "P.Value_tailocin", "adj.P.Val_tailocin")
#read in the metacsv with all the experiments
sample_order_filter  <- readRDS("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_sample_order_filter_6_12_2024.rds")
count_table_filter <- readRDS("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_count_table_filter_6_12_2024.rds")
# We need to just consider the p25.c2 data
indeces_p25c2 <- which(sample_order_filter$treatment == "p25c2")
sample_p25 <- sample_order_filter[indeces_p25c2,]
count_p25 <- count_table_filter[,indeces_p25c2]
#########
# This blog was helpful for getting me to understand the interactions: https://www.biostars.org/p/353618/#356111
#now with the filtered dataset, make deseq object
dds <- DESeqDataSetFromMatrix(countData = count_p25,
colData = sample_p25, design = ~ plant +
experiment +  plant)
dds$plant <- factor(dds$plant, levels = c("ctrl","col_0", "ey15_2"))
#perform the median of ratios method of normalization
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="plant_ey15_2_vs_ctrl" )
res_eyach <- res[,c("baseMean", "log2FoldChange", "pvalue", "padj" )]
colnames(res_eyach) <- c("baseMean_Ey", "log2FoldChange_Ey", "pvalue_Ey", "padj_Ey" )
#Now we want to convert Talia B's tnseq result file to the general ortholog mappings
ortho <- read.table("/Users/talia/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/orthologues_dc3000_p25_c2_7_2022.txt", header = T, sep= "\t")
counts_table = p25_22_counts
ortho_dict <- ortho[,3]
names(ortho_dict) <- ortho[,1]
reverse_dict_BJ_to_WP_DAK <- names(ortho_dict)
names(reverse_dict) <- ortho_dict
#in the meantime we will just look at ones that have ortholog in DC3000
BJ_val <- tb_p25$ID
conversion <- reverse_dict[BJ_val]
tb_p25$DC_ID <- conversion
tb_converted <- tb_p25 %>% filter(conversion!="NA")
rownames(tb_converted) <- tb_converted$DC_ID
#Now let's merge this fitness file with the res_eyach file
res_eyach <- data.frame(res_eyach)
res_eyach$DC_ID <- rownames(res_eyach)
eyach_tailocin <- cbind(res_eyach[tb_converted$DC_ID,], tb_converted)
head(eyach_tailocin)
write.csv(eyach_tailocin, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/tailocin_plant_fitness_612_2024.csv", header = T, quotes = FALSE)
write.table(eyach_tailocin, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/tailocin_plant_fitness_612_2024.csv", header = TRUE, quotes = FALSE)
write.table(eyach_tailocin, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/tailocin_plant_fitness_612_2024.csv", quotes = FALSE)
write.table(eyach_tailocin, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/tailocin_plant_fitness_612_2024.csv", quote = FALSE)
write.table(eyach_tailocin, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/tailocin_plant_fitness_612_2024.csv", quote = FALSE, row.names = TRUE, col.names = TRUE)
write.table(eyach_tailocin, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/tailocin_plant_fitness_612_2024.csv", quote = FALSE, row.names = TRUE, col.names = TRUE, sep="\t")
head(tb_converted)
# Graph logFC
ggplot(data=eyach_tailocin, aes(x=log2FoldChange_Ey, y =logFC_tailocin))+
geom_point()
eyach_tailocin$log2FoldChange_Ey
eyach_tailocin$log2FoldChange_Ey, eyach_tailocin$logFC_tailocin
plot(eyach_tailocin$log2FoldChange_Ey, eyach_tailocin$logFC_tailocin)
# Graph logFC
ggplot(data=eyach_tailocin, aes(x=log2FoldChange_Ey, y=logFC_tailocin))+
geom_point()
# Graph logFC
ggplot(data=eyach_tailocin, x=log2FoldChange_Ey, y=logFC_tailocin)+
geom_point()
# Graph logFC
ggplot(eyach_tailocin, aes(x=log2FoldChange_Ey, y=logFC_tailocin))+
geom_point()
rlang::last_trace()
colnames(eyach_tailocin)
table(colnames(eyach_tailocin))
res_eyach$DC_ID_r <- rownames(res_eyach)
library(DESeq2)
library(tidyverse)
library(pheatmap)
# This script reads in the rds experiments for the four experiments Done by Effie in 12/2022 and 3/2023 with Rb-Tnseq
setwd("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/")
# Talia's tailocin tnseq results
tb_p25 <- read.csv("./all_genes_table_tailocin_6_11_2024.csv", sep=",")
tb_p25 <- tb_p25[, c("ID", "logFC", "AveExpr", "t", "P.Value", "adj.P.Val")]
colnames(tb_p25) <- c("ID", "logFC_tailocin", "AveExpr_tailocin", "t_tailocin", "P.Value_tailocin", "adj.P.Val_tailocin")
#read in the metacsv with all the experiments
sample_order_filter  <- readRDS("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_sample_order_filter_6_12_2024.rds")
count_table_filter <- readRDS("~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/full_experiments/all_count_table_filter_6_12_2024.rds")
# We need to just consider the p25.c2 data
indeces_p25c2 <- which(sample_order_filter$treatment == "p25c2")
sample_p25 <- sample_order_filter[indeces_p25c2,]
count_p25 <- count_table_filter[,indeces_p25c2]
#########
# This blog was helpful for getting me to understand the interactions: https://www.biostars.org/p/353618/#356111
#now with the filtered dataset, make deseq object
dds <- DESeqDataSetFromMatrix(countData = count_p25,
colData = sample_p25, design = ~ plant +
experiment +  plant)
dds$plant <- factor(dds$plant, levels = c("ctrl","col_0", "ey15_2"))
#perform the median of ratios method of normalization
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="plant_ey15_2_vs_ctrl" )
res_eyach <- res[,c("baseMean", "log2FoldChange", "pvalue", "padj" )]
colnames(res_eyach) <- c("baseMean_Ey", "log2FoldChange_Ey", "pvalue_Ey", "padj_Ey" )
#Now we want to convert Talia B's tnseq result file to the general ortholog mappings
ortho <- read.table("/Users/talia/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/orthologues_dc3000_p25_c2_7_2022.txt", header = T, sep= "\t")
counts_table = p25_22_counts
ortho_dict <- ortho[,3]
names(ortho_dict) <- ortho[,1]
reverse_dict_BJ_to_WP_DAK <- names(ortho_dict)
names(reverse_dict) <- ortho_dict
#add the BJ to DAK mapping. I need an ortho file with the DAKCFMEO correspondence
#in the meantime we will just look at ones that have ortholog in DC3000
BJ_val <- tb_p25$ID
conversion <- reverse_dict[BJ_val]
tb_p25$DC_ID <- conversion
tb_converted <- tb_p25 %>% filter(conversion!="NA")
#rownames(tb_converted) <- tb_converted$DC_ID
#Now let's merge this fitness file with the res_eyach file
res_eyach <- data.frame(res_eyach)
res_eyach$DC_ID_r <- rownames(res_eyach)
eyach_tailocin <- cbind(res_eyach[tb_converted$DC_ID,], tb_converted)
write.table(eyach_tailocin, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/tailocin_plant_fitness_612_2024.csv", quote = FALSE, row.names = TRUE, col.names = TRUE, sep="\t")
# Graph logFC
ggplot(eyach_tailocin, aes(x=log2FoldChange_Ey, y=logFC_tailocin))+
geom_point()
# Graph logFC
ggplot(eyach_tailocin, aes(x=log2FoldChange_Ey, y=logFC_tailocin))+
geom_point() + theme_bw()
hm <- eyach_tailocin %>% filter(log2_FoldChange_Ey < (-2))
hm <- eyach_tailocin %>% filter(log2FoldChange_Ey < (-2))
hm <- eyach_tailocin %>% filter(log2FoldChange_Ey < (-2)) %>% filter(logFC_tailocin > (4))
hm
dim(hm)
write.table(eyach_tailocin, "~/Documents/GitHub/TnSeq_Pseudomonas_Genotype/input_data/tailocin/tailocin_plant_fitness_612_2024.csv", quote = FALSE, row.names = TRUE, col.names = TRUE, sep="\t")
head(p25_22_relabel)
head(count_p25)
#p25c2 2022
path_files <- p25_22
gff <- "in_planta_dec22_p25c2_counts_header.gff"
sample_info <-"sample_info_p25c2_0323.txt"
p25_22_counts <- compile_experiment(path_files, gff, sample_info)
head(path_files)
sample_info
gff
head(p25_22_count)
head(p25_22_counts)
p25_23_relabel
head(tb_p25)
dim(tb_p25)
dim(count_p25)
dim(eyach_tailocin)
head(eyach_tailocin)
eyach_tailocin %>% filter(log2FoldChange_Ey<(-2)) %>% filter(logFC_tailocin>2)
ortho
sample_order_filter
count_table_filter
eyach_tailocin %>% filter(log2FoldChange_Ey<(-2)) %>% filter(logFC_tailocin>2)
reverse_dict['BJEIHDPM_01315']
reverse_dict['BJEIHDPM_01314']
